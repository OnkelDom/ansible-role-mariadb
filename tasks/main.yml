---
- name: gather operating system variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution_file_variety | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags: mariadb

- name: Add official MariaDB repository
  template:
    src: etc_yum.repos.d_mariadb.repo.j2
    dest: /etc/yum.repos.d/MariaDB.repo
  tags: mariadb

- name: Create daemon group with specified gid
  group:
    name: "{{ mariadb_system_user.name }}"
    gid: "{{ mariadb_system_user.gid }}"
    system: true
    state: present
  tags: mariadb

- name: Create daemon user with specified uid
  user:
    name: "{{ mariadb_system_user.name }}"
    uid: "{{ mariadb_system_user.uid }}"
    system: true
    group: "{{ mariadb_system_user.name }}"
    comment: "{{ mariadb_system_user.comment }}"
    home: "{{ mariadb_system_user.home }}"
    create_home: false
    shell: "{{ mariadb_system_user.shell }}"
  tags: mariadb

- name: Install packages
  package:
    name: "{{ mariadb_packages }}"
    state: installed
  tags: mariadb

- name: install config files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
  - src: "my.cnf.d.network.j2"
    dest: "{{ mariadb_config_network }}"
  - src: "my.cnf.d.server.j2"
    dest: "{{ mariadb_config_server }}"
  notify: restart mariadb
  tags: mariadb

- name: Install custom config file
  template:
    src: my.cnf.d_custom.j2
    dest: "{{ mariadb_config_custom }}"
  when: mariadb_custom_cnf|length != 0
  notify: restart mariadb
  tags: mariadb

- name: Check if sysctl executable exists. If not, swappiness cannot be set!
  stat:
    path: /usr/sbin/sysctl
  register: sysctl_check

- name: Configure swappiness
  sysctl:
    name: vm.swappiness
    value: "{{ mariadb_swappiness }}"
    state: present
  when:
    - mariadb_configure_swappiness|bool
    - sysctl_check.stat.exists
  tags: mariadb

# SELinux context mysqld_log_t is default for /var/log/mariadb
- name: Create log directory
  file:
    state: directory
    path: /var/log/mariadb
    owner: mysql
    group: mysql
    mode: 0755
  when: mariadb_logrotate.configure|bool

- name: Configure logrotate
  template:
    src: logrotate.conf.j2
    dest: /etc/logrotate.d/mysql
  when: mariadb_logrotate.configure|bool
  notify: restart mariadb
  tags: mariadb

- name: Ensure service is started
  service:
    name: "{{ mariadb_service }}"
    state: started
    enabled: true
  tags: mariadb

- name: Authentication changes in version 10.4 message
  debug:
    msg: >
      Authentication has changed in version 10.4. Both the root user and
      the user that owns the data directory (mysql by default) now utilize
      the unix_socket plugin for passwordless access, and are created with
      an invalid password. Therefore setting a password isn't required for
      those user accounts accessing via the unix socket. Please see
      https://mariadb.org/authentication-in-mariadb-10-4/ .
      Skipping authentication setup tasks!
  when: mariadb_version is version('10.4', '>=')
  tags: mariadb

- name: Set the database root password
  include_tasks: root-password.yml
  when:
    - not mariadb_auth_unix_plugin
    - mariadb_version is version('10.4', '<')
  tags: mariadb

- name: Enable plugin unix_socket
  include_tasks: auth-unix-plugin.yml
  when:
    - mariadb_auth_unix_plugin
    - mariadb_version is version('10.4', '<')
  tags: mariadb

- name: Remove the test database
  mysql_db:
    name: test
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: absent
  tags: mariadb

- name: Create user defined databases
  mysql_db:
    name: "{{ item.name }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  with_items: "{{ mariadb_databases }}"
  register: db_creation
  tags: mariadb

# Below, the databases are initialised, but only when the database was created
# in the previous step. This ensures idempotence.
# The tasks trigger an ansible-lint warning:
#   [503] Tasks that run when changed should likely be handlers
# That's not the case here, so the linter warning is ignored.

- name: Copy database init scripts
  template:  # noqa 503
    src: "{{ item.item.init_script }}"
    dest: "/tmp/{{ item.item.init_script|basename }}"
    mode: '0600'
  with_items: "{{ db_creation.results }}"
  when: item.changed and item.item.init_script is defined
  tags: mariadb

- name: Initialise databases
  mysql_db:  # noqa 503
    name: "{{ item.item.name }}"
    state: import
    target: "/tmp/{{ item.item.init_script|basename }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
  with_items: "{{ db_creation.results }}"
  when: item.changed and item.item.init_script is defined
  tags: mariadb

- name: Delete init scripts from the server
  file:  # noqa 503
    name: "/tmp/{{ item.item.init_script|basename }}"
    state: absent
  with_items: "{{ db_creation.results }}"
  when: item.changed and item.item.init_script is defined
  tags: mariadb

- name: Remove anonymous users
  mysql_user:
    name: ''
    host_all: true
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: absent
  no_log: true
  tags: mariadb

- name: Create the users
  mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    host: "{{ item.host|default('localhost') }}"
    priv: "{{ item.priv }}"
    append_privs: "{{ item.append_privs|default('no') }}"
    login_user: root
    login_password: "{{ mariadb_root_password }}"
    login_unix_socket: "{{ mariadb_socket }}"
    state: present
  no_log: true
  with_items: "{{ mariadb_users }}"
  tags: mariadb